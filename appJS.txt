// setStatusClosed()
// Global Variables
var defaultEmployees = [
  'Bruce',
  'Snyder',
  'Taylor',
  'Mark',
  'Monica',
  'Sachin',
  'Richard',
  'Parker',
  'Bradley',
  'Zach',
  'Mike'
];

// Variables used in functions
var randomNumber;
// var issueDescription;
// var issueSeverity;
// var issueAssignedTo;
// var issueId;
// var issueStatus;
// var issues;
var sortedIssues;

// DOM Variables
var issueForm = document.getElementById('addIssueForm');
var issueDescriptionInput = document.getElementById('issueDescriptionInput');
var issueSeverityInput = document.getElementById('issueSeverityInput');
var issueAssignedToInput = document.getElementById('issueAssignedToInput');
var issueSubmitButton = document.getElementById('issueSubmit');
var issuesListElement = document.getElementById('issueListOutput');

issueDescriptionInput.addEventListener('click', function () {
  issueDescriptionInput.classList.remove('invalid');
});

// handlerbar function
function createIssueCardHTML(issue) {
  var rawTemplate = document.getElementById('issueCardTemplate').innerHTML;
  var compiledTemplate = Handlebars.compile(rawTemplate);
  var generatedTemplate = compiledTemplate(issue);
  return generatedTemplate;
}

// form validating function
function isIssueFormValid() {
  if (issueDescriptionInput.value === '') {
    return false;
  } else {
    return true;
  }
}

// styling adding function
function addVaildStyling() {
  if (isIssueFormValid()) {
    issueDescriptionInput.classList.remove('invalid');
  } else {
    issueDescriptionInput.classList.add('invalid');
  }
}

// Random Assigned To generator
function autoAssignedTo() {
  randomNumber = Math.floor(Math.random() * defaultEmployees.length);
  return defaultEmployees[randomNumber];
}

// Ascending Issues list
// function sortAscending(option) {
//   var sortedArray = [];
//   issues = JSON.parse(localStorage.getItem('issues'));
//   sortedIssues = [];
  
//   switch(option) {
//     case 'id':
//       for(var i = 0; i < issues.length; i++) {
//         sortedArray.push(issues[i].id);
//       }
//       sortedArray = sortedArray.sort();
//       for(var i = 0; i < sortedArray.length; i++) {
//         for(var j = 0; j < issues.length; j++) {
//           if(sortedArray[i] == issues[j].id){
//             sortedIssues.push(issues[j]);
//           }
//         }
//       }
//       issuesListElement.innerHTML = '';
//       for(var i = 0; i < sortedIssues.length; i++){
//         issuesListElement.innerHTML += createIssueCardHTML(sortedIssues[i]);
//       }
//       break;

//     case 'severity':
//     issuesListElement.innerHTML = '';
//       for(var i = 0; i < issues.length; i++) {
//         if (issues[i].severity == 'low') {
//           issuesListElement.innerHTML += createIssueCardHTML(issues[i]);
//         }
//       }
//       for(var i = 0; i < issues.length; i++) {
//         if (issues[i].severity == 'medium') {
//           issuesListElement.innerHTML += createIssueCardHTML(issues[i]);
//         }
//       }
//       for(var i = 0; i < issues.length; i++) {
//         if (issues[i].severity == 'high') {
//           issuesListElement.innerHTML += createIssueCardHTML(issues[i]);
//         }
//       }
//       break;

//     case 'assignedTo':
//     default:
//       for(var i = 0; i < issues.length; i++) {
//         sortedArray.push(issues[i].assignedTo);
//       }
//       sortedArray = sortedArray.sort();
//       for(var i = 0; i < sortedArray.length; i++) {
//         for(var j = 0; j < issues.length; j++) {
//           if(sortedArray[i] == issues[j].assignedTo){
//             sortedIssues.push(issues[j]);
//             break;
//           }
//         }
//       }
//       issuesListElement.innerHTML = '';
//       for(var i = 0; i < sortedIssues.length; i++){
//         issuesListElement.innerHTML += createIssueCardHTML(sortedIssues[i]);
//       }
//       break;
//   }

// }

// Fetching Issues
function fetchIssues() {
  var issues = JSON.parse(localStorage.getItem('issues'));  

  if (issues == null || issues === undefined || issues.length == 0 ) {
    issuesListElement.innerHTML = "<div class=\"welcome-message\">" + 
                                  "<h3>Yeah! No Issues Found!</h3>"
                                  + "</div>";    
  } else {
    issuesListElement.innerHTML = '';
  
    // Printing in the descending order that it added
    for (var i = issues.length - 1; i >= 0; i--) {
      issuesListElement.innerHTML += createIssueCardHTML(issues[i]);    
    }
  }
}

// Add issue function

function addIssue(){
  // styling fields
  addVaildStyling();

  if (isIssueFormValid()) {
    var issueDescription = issueDescriptionInput.value;
    var issueSeverity = issueSeverityInput.value;
    var issueAssignedTo = issueAssignedToInput.value;
    var issueId = chance.guid();
    var issueStatus = 'Open';

    if (issueAssignedToInput.value == '') {
      issueAssignedTo = autoAssignedTo();
    } 
    
    var issue = {
      id: issueId,
      description: issueDescription,
      severity: issueSeverity,
      assignedTo: issueAssignedTo,
      status: issueStatus
    };
    console.log(issue);

    if(localStorage.getItem('issues') === null) {
      console.log("No Issues");
      var issues = new Array();
      console.log(issues);
      issues.push(issue);
      console.log(issues);
      localStorage.setItem('issues', JSON.stringify(issues));
      console.log(localStorage.getItem('issues'));
    }
    
    if(localStorage.getItem('issues') != null) {
      var issues = JSON.parse(localStorage.getItem('issues'));
      console.log("not null parse" + issues);
      issues.push(issue);
      console.log("not null pushed"  +issues);
      localStorage.setItem('issues', JSON.stringify(issues));
      console.log(localStorage.getItem('issues'));
    }
    
    console.log(localStorage.getItem('issues'));  
    console.log("Outside if");

    
    issueDescriptionInput.value = '';
    issueAssignedToInput.value = '';
    issueSeverityInput.value = 'low';
    
    fetchIssues();
  }
  console.log("ending function");
}

function setStatusClosed(id){
  issues = JSON.parse(localStorage.getItem('issues'));
  issues.forEach(function(issue) {
    if(issue.id == id) {
      issue.status = 'Closed';
    }
  });
  localStorage.setItem('issues', JSON.stringify(issues));
  fetchIssues();
}

function deleteIssue(id){
  issues = JSON.parse(localStorage.getItem('issues'));
  console.log(issues);
  
  for(var i = 0; i < issues.length; i++) {
    if (issues[i].id == id){
      issues.splice(i, 1);
      console.log(issues);
      
    }
  }
  localStorage.setItem('issues', JSON.stringify(issues));
  // setTimeout(fetchIssues, 700);
  fetchIssues();
}

issueSubmitButton.addEventListener('click', addIssue);
issueForm.addEventListener('submit', function(event) {
  event.preventDefault();
})

// TODO: invalidation styling select .select to apply styling to the element

